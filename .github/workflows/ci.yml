# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  schedule:
    - cron: 0 2 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        # run: make defconfig
        run: |
            rm -f ./.config*
            touch ./.config
            # 编译x64固件:
            cat >> .config <<EOF
            CONFIG_TARGET_x86=y
            CONFIG_TARGET_x86_64=y
            CONFIG_TARGET_x86_64_Generic=y
            CONFIG_EFI_IMAGES=y
            CONFIG_LIBSODIUM_MINIMAL=y
            CONFIG_PACKAGE_boost=y
            CONFIG_PACKAGE_boost-program_options=y
            CONFIG_PACKAGE_boost-system=y
            CONFIG_PACKAGE_brook=y
            CONFIG_PACKAGE_chinadns-ng=y
            CONFIG_PACKAGE_coreutils=y
            CONFIG_PACKAGE_coreutils-base64=y
            CONFIG_PACKAGE_coreutils-nohup=y
            CONFIG_PACKAGE_dns2socks=y
            CONFIG_PACKAGE_grub2-efi=y
            CONFIG_PACKAGE_haproxy=y
            CONFIG_PACKAGE_ip-tiny=y
            CONFIG_PACKAGE_ipset=y
            CONFIG_PACKAGE_ipt2socks=y
            # CONFIG_PACKAGE_iptables-mod-filter is not set
            CONFIG_PACKAGE_iptables-mod-tproxy=y
            CONFIG_PACKAGE_kcptun-client=y
            # CONFIG_PACKAGE_kmod-ipt-filter is not set
            CONFIG_PACKAGE_kmod-ipt-tproxy=y
            # CONFIG_PACKAGE_kmod-lib-textsearch is not set
            CONFIG_PACKAGE_libatomic=y
            CONFIG_PACKAGE_libev=y
            CONFIG_PACKAGE_libipset=y
            CONFIG_PACKAGE_libltdl=y
            CONFIG_PACKAGE_libnetsnmp=y
            CONFIG_PACKAGE_libpci=y
            CONFIG_PACKAGE_libsodium=y
            CONFIG_PACKAGE_libstdcpp=y
            # CONFIG_PACKAGE_luci-app-control-timewol is not set
            # CONFIG_PACKAGE_luci-app-control-webrestriction is not set
            # CONFIG_PACKAGE_luci-app-control-weburl is not set
            CONFIG_PACKAGE_luci-app-passwall=y
            CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Brook=y
            CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks=y
            CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_GO=y
            CONFIG_PACKAGE_luci-app-passwall_INCLUDE_kcptun=y
            CONFIG_PACKAGE_luci-app-passwall_INCLUDE_simple-obfs=y
            CONFIG_PACKAGE_luci-app-passwall_INCLUDE_v2ray-plugin=y
            CONFIG_PACKAGE_pdnsd-alt=y
            CONFIG_PACKAGE_resolveip=y
            CONFIG_PACKAGE_shadowsocks-libev-config=y
            CONFIG_PACKAGE_shadowsocks-libev-ss-local=y
            CONFIG_PACKAGE_shadowsocks-libev-ss-redir=y
            CONFIG_PACKAGE_shadowsocksr-libev-alt=y
            CONFIG_PACKAGE_shadowsocksr-libev-server=y
            CONFIG_PACKAGE_shadowsocksr-libev-ssr-local=y
            CONFIG_PACKAGE_simple-obfs=y
            CONFIG_PACKAGE_snmpd=y
            CONFIG_PACKAGE_snmpd-static=y
            CONFIG_PACKAGE_tcping=y
            CONFIG_PACKAGE_trojan-go=y
            CONFIG_PACKAGE_trojan-plus=y
            CONFIG_PACKAGE_unzip=y
            CONFIG_PACKAGE_v2ray=y
            CONFIG_PACKAGE_v2ray-plugin=y
            CONFIG_TARGET_IMAGES_PAD=y
            CONFIG_TARGET_IMAGES_GZIP=y
            CONFIG_TARGET_ROOTFS_PARTSIZE=300
            CONFIG_TROJAN_GO_COMPRESS_UPX=y
            CONFIG_V2RAY_COMPRESS_GOPROXY=y
            CONFIG_V2RAY_COMPRESS_UPX=y
            CONFIG_V2RAY_DISABLE_NONE=y
            CONFIG_V2RAY_EXCLUDE_ASSETS=y
            CONFIG_V2RAY_EXCLUDE_V2CTL=y
            CONFIG_V2RAY_JSON_INTERNAL=y
            CONFIG_VMDK_IMAGES=y
            CONFIG_boost-compile-visibility-hidden=y
            CONFIG_boost-runtime-shared=y
            CONFIG_boost-static-and-shared-libs=y
            CONFIG_boost-variant-release=y
            EOF
            
            sed -i 's/^[ \t]*//g' ./.config
            make defconfig
            
      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) V=s || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
  

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.MY_PRIVATE_KEY }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
